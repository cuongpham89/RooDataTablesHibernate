// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.pablog.bookdb.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.pablog.bookdb.domain.Book;
import org.pablog.bookdb.domain.BookDataOnDemand;
import org.pablog.bookdb.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BookDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BookDataOnDemand: @Component;
    
    private Random BookDataOnDemand.rnd = new SecureRandom();
    
    private List<Book> BookDataOnDemand.data;
    
    @Autowired
    BookService BookDataOnDemand.bookService;
    
    public Book BookDataOnDemand.getNewTransientBook(int index) {
        Book obj = new Book();
        setAuthor(obj, index);
        setDatePublished(obj, index);
        setDescription(obj, index);
        setIsbn(obj, index);
        setName(obj, index);
        setPages(obj, index);
        setPublisher(obj, index);
        return obj;
    }
    
    public void BookDataOnDemand.setAuthor(Book obj, int index) {
        String author = "author_" + index;
        if (author.length() > 50) {
            author = author.substring(0, 50);
        }
        obj.setAuthor(author);
    }
    
    public void BookDataOnDemand.setDatePublished(Book obj, int index) {
        Date datePublished = new Date(new Date().getTime() - 10000000L);
        obj.setDatePublished(datePublished);
    }
    
    public void BookDataOnDemand.setDescription(Book obj, int index) {
        String description = "description_" + index;
        if (description.length() > 3000) {
            description = description.substring(0, 3000);
        }
        obj.setDescription(description);
    }
    
    public void BookDataOnDemand.setIsbn(Book obj, int index) {
        String isbn = "isbn_" + index;
        if (isbn.length() > 50) {
            isbn = isbn.substring(0, 50);
        }
        obj.setIsbn(isbn);
    }
    
    public void BookDataOnDemand.setName(Book obj, int index) {
        String name = "name_" + index;
        if (name.length() > 50) {
            name = name.substring(0, 50);
        }
        obj.setName(name);
    }
    
    public void BookDataOnDemand.setPages(Book obj, int index) {
        Integer pages = new Integer(index);
        obj.setPages(pages);
    }
    
    public void BookDataOnDemand.setPublisher(Book obj, int index) {
        String publisher = "publisher_" + index;
        if (publisher.length() > 50) {
            publisher = publisher.substring(0, 50);
        }
        obj.setPublisher(publisher);
    }
    
    public Book BookDataOnDemand.getSpecificBook(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Book obj = data.get(index);
        Long id = obj.getId();
        return bookService.findBook(id);
    }
    
    public Book BookDataOnDemand.getRandomBook() {
        init();
        Book obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return bookService.findBook(id);
    }
    
    public boolean BookDataOnDemand.modifyBook(Book obj) {
        return false;
    }
    
    public void BookDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = bookService.findBookEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Book' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Book>();
        for (int i = 0; i < 10; i++) {
            Book obj = getNewTransientBook(i);
            try {
                bookService.saveBook(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
